<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>Controle de Pausa</title>
    
    <link rel="stylesheet" href="https://raw.githubusercontent.com/zyon-king/granular/main/style_v1.1.css">
    
    <style>
        /* Seu CSS aqui */
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #333;
        }
        
        .time-inputs {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-top: 10px;
        }
        
        .time-group {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .time-group label {
            font-size: 12px;
            margin-bottom: 5px;
            font-weight: normal;
            color: #666;
        }
        
        select {
            padding: 8px 12px;
            border: 2px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            background-color: white;
            cursor: pointer;
            min-width: 70px;
        }
        
        select:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.25);
        }
        
        h2 {
            color: #333;
            margin-bottom: 25px;
            text-align: center;
        }
        
        .section-title {
            font-size: 16px;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 5px;
        }

        /* Estilos para os radio buttons */
        .radio-options {
            display: flex;
            gap: 20px;
            margin-bottom: 15px;
            padding-top: 10px;
        }

        .radio-option {
            display: flex;
            align-items: center;
        }

        .radio-option input[type="radio"] {
            margin-right: 8px;
            cursor: pointer;
        }

        .radio-option label {
            margin-bottom: 0; /* Remover margin-bottom padrão */
            font-weight: normal;
            cursor: pointer;
        }
        
        /* Estilo do botão */
        .btn-adicionar {
            background-color: #007bff;
            color: white;
            border: 2px solid #007bff;
            border-radius: 4px;
            padding: 12px 24px;
            font-size: 16px;
            font-family: Arial, sans-serif;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
            width: 100%;
            max-width: 200px;
        }

        .btn-adicionar:hover {
            background-color: #0056b3;
            border-color: #0056b3;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,123,255,0.3);
        }

        .btn-adicionar:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.25);
        }

        .btn-adicionar:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0,123,255,0.3);
        }

        /* Container para centralizar o botão */
        .button-container {
            display: flex;
            justify-content: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #e9ecef;
        }

        /* Estilo da lista de pausas */
        #lista-pausas {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #e9ecef;
        }

        .lista-pausas-titulo {
            font-size: 16px;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 5px;
            font-weight: bold;
        }

        .lista-pausas-container {
            background-color: #f8f9fa;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #e9ecef;
        }

        .lista-pausas-vazia {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 4px;
            border: 1px dashed #ddd;
        }

        /* Estilo para cada item de pausa */
        .pausa-item {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .pausa-item:hover {
            box-shadow: 0 2px 6px rgba(0,0,0,0.15);
            transform: translateY(-1px);
        }

        .pausa-item:last-child {
            margin-bottom: 0;
        }

        .pausa-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .pausa-horario {
            font-weight: bold;
            color: #333;
            font-size: 16px;
        }

        .pausa-duracao {
            color: #666;
            font-size: 14px;
        }

        .pausa-acoes {
            display: flex;
            gap: 8px;
        }

        .btn-pausa {
            padding: 6px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: white;
            color: #666;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-pausa:hover {
            background-color: #f8f9fa;
            border-color: #007bff;
            color: #007bff;
        }

        .btn-pausa.btn-remover:hover {
            background-color: #f8d7da;
            border-color: #dc3545;
            color: #dc3545;
        }

        /* Responsividade para telas menores */
        @media (max-width: 480px) {
            .pausa-info {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .pausa-acoes {
                width: 100%;
                justify-content: flex-end;
            }
        }
        
        #mensagem {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
            display: none; /* Inicia oculto */
        }
        #mensagem.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        #mensagem.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Novas classes para o popup */
        .popup {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 1;
            transition: opacity 0.5s ease-in-out;
        }

        .popup.fade-out {
            opacity: 0;
        }

        .popup-content {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 400px;
            width: 90%;
            animation: slideIn 0.3s ease-out;
        }

        .popup-content.success {
            border-top: 5px solid #28a745;
        }

        .popup-content.error {
            border-top: 5px solid #dc3545;
        }

        .popup-content.confirm {
            border-top: 5px solid #ffc107;
        }

        .popup-icon {
            font-size: 48px;
            display: block;
            margin-bottom: 15px;
        }

        .popup-content.success .popup-icon {
            color: #28a745;
        }

        .popup-content.error .popup-icon {
            color: #dc3545;
        }

        .popup-content.confirm .popup-icon {
            color: #ffc107;
        }

        .popup-content h2 {
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 24px;
            color: #333;
        }

        .popup-content p {
            margin-bottom: 25px;
            color: #555;
            line-height: 1.5;
        }

        .popup-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .popup-btn {
            padding: 10px 25px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .popup-btn-primary {
            background-color: #007bff;
            color: white;
        }

        .popup-btn-primary:hover {
            background-color: #0056b3;
            transform: translateY(-1px);
        }

        .popup-btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .popup-btn-secondary:hover {
            background-color: #5a6268;
            transform: translateY(-1px);
        }

        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
    </style>
</head>
<body>

    <div class="container">
    
    <div id="testes">
            <button id="teste-notificacao">Testar Notificação</button>
            <button id="testar-sucesso">Testar Sucesso</button>
            <button id="testar-confirmacao">Testar Confirmação</button>
            <button id="testar-erro">Testar Erro</button>
    </div>
        <h2>Controle de Pausa</h2>
        
        <div class="form-group">
            <div class="section-title">Início da pausa:</div>
            <div class="time-inputs">
                <div class="time-group">
                    <label for="hora-inicio">Hora:</label>
                    <select id="hora-inicio"></select>
                </div>
                <div class="time-group">
                    <label for="minuto-inicio">Minuto:</label>
                    <select id="minuto-inicio"></select>
                </div>
            </div>
        </div>
        
        <div class="form-group">
            <div class="section-title">Configuração da pausa:</div>
            <div class="radio-options">
                <div class="radio-option">
                    <input type="radio" id="opcao-duracao" name="opcao-pausa" value="duracao" checked>
                    <label for="opcao-duracao">Duração da pausa:</label>
                </div>
                <div class="radio-option">
                    <input type="radio" id="opcao-fim" name="opcao-pausa" value="fim">
                    <label for="opcao-fim">Fim da pausa:</label>
                </div>
            </div>
            
            <div id="campos-duracao" class="time-inputs">
                <div class="time-group">
                    <label for="hora-duracao">Hora:</label>
                    <select id="hora-duracao"></select>
                </div>
                <div class="time-group">
                    <label for="minuto-duracao">Minuto:</label>
                    <select id="minuto-duracao"></select>
                </div>
            </div>

            <div id="campos-fim" class="time-inputs" style="display: none;">
                <div class="time-group">
                    <label for="hora-fim">Hora:</label>
                    <select id="hora-fim"></select>
                </div>
                <div class="time-group">
                    <label for="minuto-fim">Minuto:</label>
                    <select id="minuto-fim"></select>
                </div>
            </div>
        </div>
        
        <div class="button-container">
            <button id="adicionar-pausa" class="btn-adicionar">Adicionar pausa</button>
        </div>

        <div id="lista-pausas">
            <div class="lista-pausas-titulo">Pausas Agendadas:</div>
            
            <div class="lista-pausas-container">
                <div class="lista-pausas-vazia">Nenhuma pausa agendada ainda.</div>
            </div>
        </div>
    </div>
    
    <script>
        // Função para carregar o script de notificações dinamicamente
        function loadNotificacoesScript() {
            return new Promise((resolve, reject) => {
                const jsURL = 'https://raw.githubusercontent.com/zyon-king/granular/main/notificacoes.js';

                fetch(jsURL)
                    .then(res => {
                        if (!res.ok) {
                            throw new Error(`HTTP error! status: ${res.status}`);
                        }
                        return res.text();
                    })
                    .then(scriptText => {
                        // Executa o script baixado no escopo global
                        // eslint-disable-next-line no-eval
                        eval(scriptText); 
                        // Agora, esperamos que o script avaliado tenha definido window.notificacoesReady
                        if (window.notificacoesReady) {
                            return window.notificacoesReady; // Espera a promise interna do script
                        } else {
                            // Se notificacoesReady não foi definido (erro no script ou versão antiga)
                            throw new Error("Script de notificações não sinalizou que está pronto.");
                        }
                    })
                    .then(() => {
                        console.log("Script de notificações e suas funções estão prontos.");
                        resolve();
                    })
                    .catch(err => {
                        console.error('Erro ao carregar ou executar script de notificações:', err);
                        showError("Erro crítico: Não foi possível carregar as funcionalidades de notificação.");
                        reject(err);
                    });
            });
        }

        // Função para garantir que o DOM esteja pronto
        function domReady() {
            return new Promise(resolve => {
                if (document.readyState === "loading") {
                    document.addEventListener("DOMContentLoaded", resolve);
                } else {
                    resolve();
                }
            });
        }

        // Função principal de inicialização da sua aplicação
        async function initApp() {
            await domReady(); // Garante que o DOM está pronto primeiro
            console.log("DOM pronto.");

            try {
                await loadNotificacoesScript(); // Aguarda o script de notificações carregar e estar pronto
                console.log("Notificações prontas para uso.");

                // Agora que tudo está pronto, você pode inicializar a lógica principal da sua aplicação
                // e configurar os event listeners que dependem das funções de notificação.

                // Preencher seletores e definir valores padrão (já pode ser feito, não depende de notificações)
                populateSelect(horaInicioSelect, 0, 24);
                populateSelect(minutoInicioSelect, 0, 60);
                populateSelect(horaDuracaoSelect, 0, 24);
                populateSelect(minutoDuracaoSelect, 0, 60);
                populateSelect(horaFimSelect, 0, 24);
                populateSelect(minutoFimSelect, 0, 60);

                const agora = new Date();
                horaInicioSelect.value = agora.getHours().toString().padStart(2, '0');
                minutoInicioSelect.value = agora.getMinutes().toString().padStart(2, '0');
                horaDuracaoSelect.value = '00';
                minutoDuracaoSelect.value = '30';
                const fimPadrao = new Date(agora.getTime() + 30 * 60 * 1000);
                horaFimSelect.value = fimPadrao.getHours().toString().padStart(2, '0');
                minutoFimSelect.value = fimPadrao.getMinutes().toString().padStart(2, '0');

                toggleTimeInputs();

                // Adicionar os event listeners para os botões de teste
                document.getElementById('testar-sucesso').addEventListener('click', () => {
                    showSuccess("Ação realizada com sucesso!");
                });

                document.getElementById('testar-confirmacao').addEventListener('click', () => {
                    showConfirm("Você deseja excluir?", 
                        () => showSuccess("Você clicou em Sim!"),
                        () => showError("Você clicou em Não!")
                    );
                });

                document.getElementById('testar-erro').addEventListener('click', () => {
                    showError("Ocorreu um erro!");
                });

                document.getElementById('teste-notificacao').addEventListener('click', () => {
                    // isPermissionGranted e askForNotificationPermissionAsync vêm do script de notificações
                    if (isPermissionGranted()) {
                        new Notification('Notificação de teste', {
                            body: 'Essa é uma notificação de teste!',
                        });
                    } else {
                        askForNotificationPermissionAsync();
                    }
                });

                // Event listener para o botão "Adicionar pausa"
                document.getElementById('adicionar-pausa').addEventListener('click', function() {
                    const horaInicio = horaInicioSelect.value;
                    const minutoInicio = minutoInicioSelect.value;
                    const inicioString = `${horaInicio}:${minutoInicio}`;

                    let duracaoMinutos;
                    let duracaoTexto;
                    let fimString;

                    if (opcaoDuracaoRadio.checked) {
                        const horaDuracao = parseInt(horaDuracaoSelect.value);
                        const minutoDuracao = parseInt(minutoDuracaoSelect.value);
                        duracaoMinutos = horaDuracao * 60 + minutoDuracao;
                        duracaoTexto = calcularDuracaoTexto(duracaoMinutos);
                        fimString = calcularFim(inicioString, duracaoMinutos);
                    } else {
                        const horaFim = horaFimSelect.value;
                        const minutoFim = minutoFimSelect.value;
                        fimString = `${horaFim}:${minutoFim}`;
                        duracaoMinutos = calcularDuracaoMinutos(inicioString, fimString);
                        duracaoTexto = calcularDuracaoTexto(duracaoMinutos);
                    }
                                        
                    showConfirm(`Deseja adicionar a pausa?\nInício: ${inicioString}\nFim: ${fimString}\nDuração: ${duracaoTexto}`, 
                        () => {
                            adicionarPausaNaLista(inicioString, fimString, duracaoTexto);
                            showSuccess(`Pausa adicionada!\nInício: ${inicioString}\nFim: ${fimString}\nDuração: ${duracaoTexto}`);
                        },
                        () => showError("Operação cancelada!")
                    );
                });

                // Adiciona a mensagem de "Nenhuma pausa agendada" inicialmente se a lista estiver vazia
                const listaPausasContainer = document.querySelector('#lista-pausas .lista-pausas-container');
                if (listaPausasContainer.children.length === 0) {
                    const mensagemVazia = document.createElement('div');
                    mensagemVazia.className = 'lista-pausas-vazia';
                    mensagemVazia.textContent = 'Nenhuma pausa agendada ainda.';
                    listaPausasContainer.appendChild(mensagemVazia);
                }

                // Chamar initializeApp do script de notificações depois de tudo pronto
                // Isso executará a lógica de permissão de notificação e os testes internos do script.
                initializeApp();

            } catch (error) {
                console.error("Falha na inicialização da aplicação principal:", error);
                // Já mostramos um erro dentro de loadNotificacoesScript, se for o caso
            }
        }

        // --- Funções de Cálculo e Adição de Pausa (mantidas no script principal) ---

        function populateSelect(selectElement, start, end) { /* ... */ }
        function toggleTimeInputs() { /* ... */ }
        function calcularDuracaoMinutos(inicio, fim) { /* ... */ }
        function calcularDuracaoTexto(duracaoMinutos) { /* ... */ }
        function calcularFim(inicio, duracaoMinutos) { /* ... */ }
        function adicionarPausaNaLista(inicio, fim, duracaoTexto) { /* ... */ }

        // Inicializa toda a aplicação quando o DOM estiver pronto e o script de notificações for carregado
        initApp();
    </script>
</body>
</html>
